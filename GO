#!/usr/bin/python

import os
import json
import sys
import hashlib
import termios
import argparse

#--------------------------------------------------------------------------------
# Write a line of text to the console and log file

def logWrite(text):
   print text,
   log.write(text)

#--------------------------------------------------------------------------------
# Write a line of text to the console and log file

def logWriteLn(text):
   logWrite(text+"\n")

#--------------------------------------------------------------------------------
# Report an error to the console and log file

def logError(text):
   logWriteLn("ERROR: "+text)

#--------------------------------------------------------------------------------
# Calculate the MD5 checksum for a file

def md5(filename):

    hash = hashlib.md5()

    with open(filename) as file:
        for block in iter(lambda: file.read(4096), b""):
            hash.update(block)

    return hash.hexdigest()

#--------------------------------------------------------------------------------
# 

def restoreTermIO():
   tio = termios.tcgetattr(0)
   tio[3] = tio[3] | termios.ECHO | termios.ICANON
   termios.tcsetattr(0, termios.TCSANOW, tio)

#--------------------------------------------------------------------------------

def listGames(list):
   i=0
   for game in games_list:
      i=i+1
      print "#%02u  " % (i) + os.path.basename(game[0])

#--------------------------------------------------------------------------------

def packGames(list):
   archive=os.getcwd()+"/games.tar"
   if os.path.isfile(archive):
      os.remove(archive)
   os.system("tar cvf "+archive)
   os.chdir(games_dir)

   for game in games_list:
      os.system("tar rvf "+archive+" "+game[0])

   os.system("gzip "+archive)

#--------------------------------------------------------------------------------

def hexDump(game):
   full_path=games_dir+"/"+game[0]
   print "Read '"+full_path+"'"
   with open(full_path) as file:
      print "Write 'hex.log'"
      out=open("hex.log", "w")
      offset=0
      for data in iter(lambda: file.read(16), b""):
         out.write("%06X : " % (offset))
         for ch in data:
            out.write("%02X " % (ord(ch)))
         out.write(": ")
         for ch in data:
            byte=ord(ch)
            if ((byte >= 0x20) and (byte <= 0x7F)):
               out.write(ch)
            else:
               out.write('.')
         out.write('\n')
         offset=offset+16
      out.close();

#--------------------------------------------------------------------------------

def playOnZif(game):
   full_path=games_dir+"/"+game[0]
   os.system("Zif/zif --trace --term "+full_path)

#--------------------------------------------------------------------------------

def playOnFrotz(game):
   full_path=games_dir+"/"+game[0]
   os.system(os.environ['HOME']+"/OpenSource/frotz-2.43d/frotz "+full_path)

#--------------------------------------------------------------------------------

def testSingleGame(game):
   global errors, warnings

   status = -1
   logWriteLn("================================================================================")

   full_path=games_dir+"/"+game[0]
   if not os.path.isfile(full_path):
      logError("Story file '"+full_path+"' not found")
   else:
      logWriteLn(" File : "+os.path.basename(game[0]))
      logWriteLn(" MD5  : "+md5(full_path))
      logWriteLn(" Path : "+os.path.dirname(game[0]))
      logWriteLn("--------------------------------------------------------------------------------")

      input_file="input/"+os.path.basename(game[0])+".in"
      status = os.system("Zif/zif --batch --info --term --width 80 --print --input "+input_file+
                    " "+full_path)
      if status!=0:
         logError("Exited with a fault [%u]" % (status))

      out_log="print.log"
      if not os.path.isfile(out_log):
         logError("No output log '"+out_log+"'")
      else:
         with open(out_log) as f:
            for line in f:
               if "ERR:" in line:
                  errors = errors + 1
               if "WRN:" in line:
                  warnings = warnings + 1
               logWrite(line)
         os.remove(out_log)

      for file in ["undo_0.sav", "undo_1.sav"]:
         if os.path.isfile(file):
            os.remove(file)

   return status 

#--------------------------------------------------------------------------------

def testAllGames(list):
   clean=0
   for game in games_list:
      if testSingleGame(game) == 0:
         clean=clean+1

   logWriteLn("================================================================================")
   logWriteLn("Games      : %8u" % (len(games_list)))
   logWriteLn("Clean exit : %8u" % (clean))
   logWriteLn("Errors     : %8u" % (errors))
   logWriteLn("Warnings   : %8u" % (warnings))
   logWriteLn("--------------------------------------------------------------------------------")

#--------------------------------------------------------------------------------

parser=argparse.ArgumentParser(description='Test Zif')

parser.add_argument('-l', '--list', dest='list', action='store_true',
                    help="list tests without running them")
parser.add_argument('-p', '--pack', dest='pack', action='store_true',
                    help="create a package of story files")
parser.add_argument('-b', '--build', dest='build', action='store_true',
                    help="pull and rebuild Zif")
parser.add_argument('-x', '--hex', dest='hex', metavar='#', type=int, default=0,
                    help="hex dump the story file")
parser.add_argument('-t', '--test', dest='test', metavar='#', type=int, default=0,
                    help="run a single test")
parser.add_argument('-z', '--zif', dest='zif', metavar='#', type=int, default=0,
                    help="play story on zif")
parser.add_argument('-f', '--frotz', dest='frotz', metavar='#', type=int, default=0,
                    help="play story frotz")

args=parser.parse_args()

#--------------------------------------------------------------------------------

log=0
errors=0
warnings=0

games_dir=os.environ["HOME"]+"/Data/Fun/Games/InteractiveFiction/Games"
games_list_file="games_list.json"

games_list=json.load(open(games_list_file))

if args.build:
   os.chdir("Zif")
   os.system("git pull --rebase")
   os.system("scons debug=1")
   os.chdir("..")

if args.list:
   listGames(games_list)
elif args.pack:
   packGames(games_list)
elif args.hex != 0:
   hexDump(games_list[args.hex - 1])
elif args.frotz != 0:
   playOnFrotz(games_list[args.frotz - 1])
elif args.zif!= 0:
   playOnZif(games_list[args.zif - 1])
elif args.test != 0:
   with open("tst.log", "w") as log:
      testSingleGame(games_list[args.test - 1])
else:
   with open("tst.log", "w") as log:
      testAllGames(games_list)

restoreTermIO()
