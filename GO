#!/usr/bin/python

import os
import shutil
import glob
import fnmatch
import json
import sys
import hashlib
import termios
import argparse

#--------------------------------------------------------------------------------
# Write a line of text to the console and log file

def logWrite(text):
   print text,
   log.write(text)

#--------------------------------------------------------------------------------
# Write a line of text to the console and log file

def logWriteLn(text):
   logWrite(text+"\n")

#--------------------------------------------------------------------------------
# Report an error to the console and log file

def logError(text):
   logWriteLn("ERROR: "+text)

#--------------------------------------------------------------------------------
# Calculate the MD5 checksum for a file

def md5(filename):

    hash = hashlib.md5()

    with open(filename) as file:
        for block in iter(lambda: file.read(4096), b""):
            hash.update(block)

    return hash.hexdigest()

#--------------------------------------------------------------------------------
# 

def restoreTermIO():
   tio = termios.tcgetattr(0)
   tio[3] = tio[3] | termios.ECHO | termios.ICANON
   termios.tcsetattr(0, termios.TCSANOW, tio)

#--------------------------------------------------------------------------------

def listGames(list):
   i=0
   for game in games_list:
      i=i+1
      print "#%02u  " % (i) + os.path.basename(game)

#--------------------------------------------------------------------------------

def packGames(list):
   archive=os.getcwd()+"/cache.tar"
   if os.path.isfile(archive):
      os.remove(archive)
   os.system("tar cvf "+archive)

   for game in games_list:
      os.system("tar rvf "+archive+" "+game)

   os.system("gzip "+archive)

#--------------------------------------------------------------------------------

def dump(path):
   filename=os.path.basename(path)
   os.system("Zif/zdmp "+path+" --out "+filename+".dmp")

#--------------------------------------------------------------------------------

def playOnZif(path):
   os.system("Zif/zif --term "+path)

#--------------------------------------------------------------------------------

def playOnFrotz(path):
   os.system(os.environ['HOME']+"/OpenSource/frotz-2.43d/frotz "+path)

#--------------------------------------------------------------------------------

def testGame(path, index, other_args):
   global errors, warnings

   status = -1
   logWriteLn("================================================================================")
   logWriteLn("Index : "+str(index))
   logWriteLn("File  : "+os.path.basename(path))
   logWriteLn("Path  : "+os.path.dirname(path))

   if not os.path.isfile(path):
      logError("Story file '"+path+"' not found")
   else:
      logWriteLn("MD5   : "+md5(path))
      logWriteLn("--------------------------------------------------------------------------------")

      input_file="input/"+os.path.basename(path)+".in"
      if not os.path.isfile(input_file):
         input_file="input/default.in"

      status = os.system("Zif/zif --batch --info --term --width 80 --print --input "+input_file+
                         " "+path+" "+other_args)
      if status!=0:
         logError("Exited test #%u with a fault [%u]" % (index, status))

      out_log="print.log"
      if not os.path.isfile(out_log):
         logError("No output log '"+out_log+"'")
         errors = errors + 1
      else:
         with open(out_log) as f:
            for line in f:
               if "ERR:" in line:
                  errors = errors + 1
               if "WRN:" in line:
                  warnings = warnings + 1
               logWrite(line)
         os.remove(out_log)

   return status 

#--------------------------------------------------------------------------------

def testAllGames(list):
   index=0
   clean=0
   for game in games_list:
      index=index+1
      if testGame(game, index, "") == 0:
         clean=clean+1
      

   logWriteLn("")
   logWriteLn("================================================================================")
   logWriteLn("Games      : %8u" % (len(games_list)))
   logWriteLn("Clean exit : %8u" % (clean))
   logWriteLn("Errors     : %8u" % (errors))
   logWriteLn("Warnings   : %8u" % (warnings))
   logWriteLn("--------------------------------------------------------------------------------")

#--------------------------------------------------------------------------------

def getGames(cache_dir, games_list_file):

   if not os.path.isdir(cache_dir):
      os.system("mkdir "+cache_dir)

   path_list = ["/if-archive/infocom/interpreters/tools/",
                "/if-archive/infocom/demos/",
                "/if-archive/phoenix/hints/zcode/",
                "/if-archive/scott-adams/games/zcode/",
                "/if-archive/games/zcode/"]

   for path in path_list:
      os.system("Zif/zcrape --path "+path+" --cache "+cache_dir)

   # Create list of interesting file extensions
   ext_list = []
   for version in range(8):
      ext_list += ['z'+str(version+1)]
      ext_list += ['Z'+str(version+1)]
   ext_list += ['zblorb']

   # Find and decompress zip files
   for filename in glob.glob(cache_dir+'/*.zip'):
      extract_dir=filename+"_extract"

      if not os.path.isdir(extract_dir):
         os.system("mkdir "+extract_dir)
         os.system("unzip -d "+extract_dir+" "+filename)

      for ext in ext_list:
         for root, dirnames, filenames in os.walk(extract_dir):
            for filename in fnmatch.filter(filenames, '*.'+ext):
               nice_filename=filename.replace(' ', '_')
               nice_filename=nice_filename.replace("'", '_')
               nice_filename=nice_filename.replace('(', '_')
               nice_filename=nice_filename.replace(')', '_')
               shutil.copy2(root+'/'+filename, cache_dir+'/'+nice_filename)

   # Compile a list of all the files
   game_list = []

   game_list += ["extra/crashme.z5"]
   game_list += ["extra/etude.z5"]
   game_list += ["extra/gntests.z5"]
   game_list += ["extra/random.z5"]

   for ext in ext_list:
      for filename in glob.glob(cache_dir+'/*.'+ext):
         game_list += [filename]

   game_list.sort()

   with open(games_list_file, 'w') as outfile:
      json.dump(game_list, outfile, indent=3)

   return

#--------------------------------------------------------------------------------

parser=argparse.ArgumentParser(description='Test Zif')

parser.add_argument('-a', '--all', dest='all', action='store_true',
                    help="pull source, rebuild Zif, get story files and run all tests")
parser.add_argument('-b', '--build', dest='build', action='store_true',
                    help="pull source and rebuild Zif")
parser.add_argument('-g', '--get', dest='get', action='store_true',
                    help="get story files")
parser.add_argument('-r', '--run', dest='test_all', action='store_true',
                    help="run all the tests")
parser.add_argument('-l', '--list', dest='list', action='store_true',
                    help="list tests without running them")
parser.add_argument('-p', '--pack', dest='pack', action='store_true',
                    help="create a package of story files")
parser.add_argument('-d', '--dump', dest='dump', metavar='#', type=int, default=0,
                    help="Dump the story file")
parser.add_argument('-t', '--test', dest='test_one', metavar='#', type=int, default=0,
                    help="run a single test")
parser.add_argument('-z', '--zif', dest='zif', metavar='#', type=int, default=0,
                    help="play story on zif")
parser.add_argument('-f', '--frotz', dest='frotz', metavar='#', type=int, default=0,
                    help="play story frotz")

args=parser.parse_args()

#--------------------------------------------------------------------------------

if args.all:
   args.build    = True
   args.get      = True
   args.test_all = True

if args.test_one:
   args.dump = args.test_one

#--------------------------------------------------------------------------------

log=0
errors=0
warnings=0

games_list_file="stories.json"

if args.build:
   os.chdir("Zif")
   os.system("git pull --rebase")
   os.system("scons debug=1")
   os.chdir("..")

if args.get:
   getGames("cache", games_list_file)

games_list=json.load(open(games_list_file))

if args.test_all:
   with open("all.out", "w") as log:
      testAllGames(games_list)
   os.system("git diff all.out")

if args.list:
   listGames(games_list)

if args.pack:
   packGames(games_list)

if args.zif!= 0:
   playOnZif(games_list[args.zif - 1])

if args.frotz != 0:
   playOnFrotz(games_list[args.frotz - 1])

if args.dump != 0:
   dump(games_list[args.dump - 1])

if args.test_one != 0:
   path=games_list[args.test_one - 1]
   filename=os.path.basename(path)
   with open(filename+".out", "w") as log:
      testGame(path, args.test_one, "--trace")
      os.rename("trace.log", filename+".trc")

restoreTermIO()
